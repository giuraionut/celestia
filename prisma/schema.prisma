generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
// User model represents application users and their relations.
// Soft deletion is implemented via the isDeleted flag.
// -----------------------------------------------------------------------------
model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  votes             Vote[]
  recentCommunities RecentlyVisitedCommunity[]

  joinedCommunities           Community[]                @relation(name: "CommunityMembers")
  managedCommunities          Community[]                @relation(name: "CommunityManagers")
  createdCommunities          Community[]
  bannedFrom                  BannedUserFromCommunity[]
  banActions                  BannedUserFromCommunity[]  @relation("BannedByActions")
  hiddenPosts                 HiddenPost[]
  savedPosts                  SavedPost[]
  savedComments               SavedComment[]
  communityPostRemovalActions RemovedPostFromCommunity[] @relation("CommunityPostRemovals")
  isDeleted                   Boolean                    @default(false)
}

// -----------------------------------------------------------------------------
// Account model stores external authentication information for NextAuth.
// Field names are kept as NextAuth expects.
// -----------------------------------------------------------------------------
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  // If an account is deleted, you might decide to remove it,
  // but typically this is managed by NextAuth.
  isDeleted Boolean @default(false)

  @@unique([provider, providerAccountId]) // <-- ADD THIS COMPOUND UNIQUE INDEX
  @@index([userId])
}

// -----------------------------------------------------------------------------
// Session model tracks login sessions for users.
// -----------------------------------------------------------------------------
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// -----------------------------------------------------------------------------
// Community model represents groups that users can join or manage.
// Soft deletion via isDeleted so that posts remain even if the community is "deleted".
// -----------------------------------------------------------------------------
model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String
  isDeleted   Boolean  @default(false)
  isPrivate   Boolean  @default(false)

  authorId String
  // Do not cascade delete the community if the author is deleted.
  author   User   @relation(fields: [authorId], references: [id])

  posts         Post[]
  members       User[]                     @relation(name: "CommunityMembers")
  managers      User[]                     @relation(name: "CommunityManagers")
  removedPosts  RemovedPostFromCommunity[]
  bannedUsers   BannedUserFromCommunity[]
  totalPosts    Int                        @default(0)
  totalMembers  Int                        @default(0)
  totalManagers Int                        @default(0)

  @@index([name])
}

model RemovedPostFromCommunity {
  id          String   @id @default(cuid())
  postId      String   @unique // A post can only be removed once from its community
  communityId String // Store for potential indexing/querying, though postId is unique link
  removedAt   DateTime @default(now())
  removedById String // User ID of the manager/author who removed it

  // Relations
  post      Post      @relation(fields: [postId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
  removedBy User      @relation("CommunityPostRemovals", fields: [removedById], references: [id])

  // Add indexes for potential lookups
  @@index([communityId])
  @@index([removedById])
}

model BannedUserFromCommunity {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  bannedAt    DateTime @default(now())
  // Optional: Track who performed the ban for audit purposes
  bannedById  String?

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
  // Optional: Relation to the user who banned
  bannedBy  User?     @relation("BannedByActions", fields: [bannedById], references: [id])

  // Ensure a user can only be banned once per community
  @@unique([userId, communityId])
  // Add indexes for efficient lookups
  @@index([communityId])
  @@index([bannedById])
}

// -----------------------------------------------------------------------------
// RecentlyVisitedCommunity tracks communities that a user has visited.
// -----------------------------------------------------------------------------
model RecentlyVisitedCommunity {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  visitedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, communityId])
}

// -----------------------------------------------------------------------------
// Post model stores user posts.
// Soft deletion via isDeleted, so comments remain visible.
// -----------------------------------------------------------------------------
model Post {
  id               String   @id @default(cuid())
  title            String
  content          String
  plainTextContent String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  communityId      String
  authorId         String
  cover            String
  isDeleted        Boolean  @default(false)

  // Do not cascade delete posts when the community or author is removed.
  community Community @relation(fields: [communityId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  votes     Vote[]

  totalComments  Int @default(0)
  totalUpvotes   Int @default(0)
  totalDownvotes Int @default(0)
  voteScore      Int @default(0)

  hiddenBy             HiddenPost[]
  savedBy              SavedPost[]
  removedFromCommunity RemovedPostFromCommunity?

  @@index([title])
  @@index([createdAt])
}

// -----------------------------------------------------------------------------
// Comment model stores comments on posts.
// Soft deletion via isDeleted; comments remain even if the post is soft-deleted.
// -----------------------------------------------------------------------------
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String
  parentId  String? // Optional field for replies

  isDeleted      Boolean @default(false)
  totalUpvotes   Int     @default(0)
  totalDownvotes Int     @default(0)
  voteScore      Int     @default(0)

  // Do not cascade delete comments when a post or author is removed.
  post    Post      @relation(fields: [postId], references: [id])
  author  User      @relation(fields: [authorId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
  votes   Vote[]

  savedBy SavedComment[]

  @@index([content])
  @@index([parentId])
  @@index([createdAt])
}

// -----------------------------------------------------------------------------
// Vote model stores upvotes/downvotes. Votes can be linked to posts or comments.
// -----------------------------------------------------------------------------
model Vote {
  id        String  @id @default(cuid())
  userId    String
  postId    String? // Optional because a vote can be on a post or comment
  commentId String? // Optional because a vote can be on a post or comment

  type    VoteType
  user    User     @relation(fields: [userId], references: [id])
  // We avoid cascade deletion here so that votes remain even if the post/comment is soft-deleted.
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

// -----------------------------------------------------------------------------
enum VoteType {
  UPVOTE
  DOWNVOTE
}

// -----------------------------------------------------------------------------
// HiddenPost model tracks posts a user has chosen to hide.
// -----------------------------------------------------------------------------
model HiddenPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([createdAt])
}

// -----------------------------------------------------------------------------
// SavedPost model tracks posts a user has saved.
// -----------------------------------------------------------------------------
model SavedPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([createdAt])
}

// -----------------------------------------------------------------------------
// SavedComment model tracks comments a user has saved.
// -----------------------------------------------------------------------------
model SavedComment {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@index([createdAt])
}
